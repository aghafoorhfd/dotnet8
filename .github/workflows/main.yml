name: Deploy .NET 8 App to Azure VM via SSH

on:
  push:
    branches:
      - main  # Trigger on push to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub runner for the build job

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # Specify the .NET 8 version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release

    - name: Publish the project
      run: dotnet publish --configuration Release --output ./publish

  deploy:
    runs-on: ubuntu-latest  # Running the deployment job from Ubuntu to use SSH
    needs: build  # This job will only run after the 'build' job completes

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install SSH client and sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass

    - name: Deploy to Azure VM using SSH
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
        AZURE_VM_PASSWORD: ${{ secrets.AZURE_VM_PASSWORD }}
      run: |
        # Use sshpass to authenticate with password and deploy using SSH
        # Set up a secure SSH connection and transfer the published files to the VM

        # Transfer published files from the GitHub runner to the Azure VM
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ./publish/* $AZURE_VM_USER@${{ secrets.AZURE_VM_IP }}:/path/to/your/app/folder

        # SSH into the Azure VM and restart IIS or your service after deployment
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no $AZURE_VM_USER@${{ secrets.AZURE_VM_IP }} << 'EOF'
          # Optional: Restart IIS if your app is hosted on IIS
          powershell.exe -Command "Restart-Service -Name 'W3SVC'"  # Restart IIS service

          # Alternatively, if you're running a Windows service:
          # powershell.exe -Command "Restart-Service -Name 'YourServiceName'"

          # Alternatively, restart the app manually or do any other necessary actions
          # powershell.exe -Command "Restart-Process -Name 'yourAppProcessName'"
        EOF
