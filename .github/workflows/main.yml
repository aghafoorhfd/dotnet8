name: Deploy .NET 8 App to Azure VM via SSH

on:
  push:
    branches:
      - main  # Trigger on push to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to 'main'

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub runner for the build job

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # Specify the .NET 8 version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release

    - name: Publish the project
      run: dotnet publish --configuration Release --output ./publish

  deploy:
    runs-on: ubuntu-latest  # Running the deployment job from Ubuntu to use SSH
    needs: build  # This job will only run after the build job completes

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client

    - name: Add SSH Key
      if: secrets.AZURE_SSH_PRIVATE_KEY != ''
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Set SSH known hosts (optional but recommended)
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to Azure VM using SSH
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
        AZURE_VM_PASSWORD: ${{ secrets.AZURE_VM_PASSWORD }}
      run: |
        # SSH into the Azure VM and deploy the published app
        if [ -n "$AZURE_SSH_PRIVATE_KEY" ]; then
          # If using SSH keys for authentication, connect and deploy
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            # Change directory to where the application will be deployed
            mkdir -p C:/path/to/your/app/folder
            
            # Copy published files from GitHub Actions runner to VM
            # Assuming we published to the 'publish' folder locally
            scp -r ./publish/* $AZURE_VM_USER@$AZURE_VM_IP:/path/to/your/app/folder

            # (Optional) Restart the service or IIS if needed
            # For IIS, you can restart the IIS service after deploying
            powershell.exe -Command "Restart-Service -Name 'YourIISService'"

            # Alternatively, if it's a Windows service, use:
            # powershell.exe -Command "Restart-Service -Name 'YourServiceName'"

          EOF
        else
          # If using password authentication (less secure, but works for testing)
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            # Change directory to where the application will be deployed
            mkdir -p C:/path/to/your/app/folder
            
            # Copy published files from GitHub Actions runner to VM
            # Assuming we published to the 'publish' folder locally
            scp -r ./publish/* $AZURE_VM_USER@$AZURE_VM_IP:/path/to/your/app/folder

            # (Optional) Restart the service or IIS if needed
            powershell.exe -Command "Restart-Service -Name 'YourIISService'"

            # Alternatively, if it's a Windows service, use:
            # powershell.exe -Command "Restart-Service -Name 'YourServiceName'"

          EOF
        fi
